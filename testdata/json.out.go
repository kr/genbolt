// Generated by github.com/kr/genbolt. DO NOT EDIT.
// See testdata/json.in.go

package db

import json "encoding/json"
import sample "github.com/kr/genbolt/testdata/sample"

import binary "encoding/binary"
import bolt "github.com/coreos/bbolt"

const _ = binary.MaxVarintLen16
const _ = bolt.MaxKeySize

type T struct {
	db *bolt.Bucket
}

func (o *T) Bucket() *bolt.Bucket {
	return o.db
}

func (o *T) J() *sample.JSON {
	rec := o.db.Get(keyJ)
	if rec == nil {
		return nil
	}
	v := new(sample.JSON)
	err := json.Unmarshal(rec, json.Unmarshaler(v))
	if err != nil {
		panic(err)
	}
	return v
}

// PutJ stores v as the value of J.
func (o *T) PutJ(v *sample.JSON) {
	rec, err := json.Marshal(json.Marshaler(v))
	if err != nil {
		panic(err)
	}
	put(o.db, keyJ, rec)
}

var (
	keyJ = []byte("J")
)

func put(b *bolt.Bucket, key, value []byte) {
	err := b.Put(key, value)
	if err != nil {
		panic(err)
	}
}
