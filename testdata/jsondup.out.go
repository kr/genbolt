// Generated by github.com/kr/genbolt. DO NOT EDIT.
// See testdata/jsondup.in.go.

package db

import bytes "bytes"
import binary "encoding/binary"
import json "encoding/json"
import bolt "github.com/coreos/bbolt"
import sample "github.com/kr/genbolt/testdata/sample"

const _ = binary.MaxVarintLen16
const _ = bolt.MaxKeySize
const _ = bytes.MinRead

// T is a bucket with a static set of elements.
// Accessor methods read and write records
// and open child buckets.
type T struct {
	db *bolt.Bucket
}

// Bucket returns o's underlying *bolt.Bucket object.
// This can be useful to access low-level database functions
// or other features not exposed by this generated code.
//
// Note, if o's transaction is read-only and the underlying
// bucket has not previously been created in a writable
// transaction, Bucket returns nil.
func (o *T) Bucket() *bolt.Bucket {
	return o.db
}

// J reads the record stored under key "J".
// If no record has been stored, J returns
// a pointer to
// the zero value.
func (o *T) J() *sample.JSON {
	rec := get(o.db, keyJ)
	v := new(sample.JSON)
	if rec == nil {
		return v
	}
	err := json.Unmarshal(rec, json.Unmarshaler(v))
	if err != nil {
		panic(err)
	}
	return v
}

// PutJ stores v as a record under the key "J".
func (o *T) PutJ(v *sample.JSON) {
	rec, err := json.Marshal(json.Marshaler(v))
	if err != nil {
		panic(err)
	}
	put(o.db, keyJ, rec)
}

// H reads the record stored under key "H".
// If no record has been stored, H returns
// a pointer to
// the zero value.
func (o *T) H() *sample.JSON2 {
	rec := get(o.db, keyH)
	v := new(sample.JSON2)
	if rec == nil {
		return v
	}
	err := json.Unmarshal(rec, json.Unmarshaler(v))
	if err != nil {
		panic(err)
	}
	return v
}

// PutH stores v as a record under the key "H".
func (o *T) PutH(v *sample.JSON2) {
	rec, err := json.Marshal(json.Marshaler(v))
	if err != nil {
		panic(err)
	}
	put(o.db, keyH, rec)
}

var (
	keyH = []byte("H")
	keyJ = []byte("J")
)

func get(b *bolt.Bucket, key []byte) []byte {
	if b == nil {
		return nil
	}
	return b.Get(key)
}

func put(b *bolt.Bucket, key, value []byte) {
	err := b.Put(key, value)
	if err != nil {
		panic(err)
	}
}
