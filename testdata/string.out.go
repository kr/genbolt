// Generated by github.com/kr/genbolt. DO NOT EDIT.
// See testdata/string.in.go.

package db

import binary "encoding/binary"
import bolt "github.com/coreos/bbolt"

const _ = binary.MaxVarintLen16
const _ = bolt.MaxKeySize

// T is a bucket with a static set of elements.
// Accessor methods read and write records
// and open child buckets.
type T struct {
	db *bolt.Bucket
}

// Bucket returns o's underlying *bolt.Bucket object.
// This can be useful to access low-level database functions
// or other features not exposed by this generated code.
//
// Note, if o's transaction is read-only and the underlying
// bucket has not previously been created in a writable
// transaction, Bucket returns nil.
func (o *T) Bucket() *bolt.Bucket {
	return o.db
}

// S reads the record stored under key "S".
// If no record has been stored, S returns
// the zero value.
func (o *T) S() string {
	rec := get(o.db, keyS)
	return string(rec)
}

// PutS stores v as a record under the key "S".
func (o *T) PutS(v string) {
	rec := []byte(v)
	put(o.db, keyS, rec)
}

var (
	keyS = []byte("S")
)

func get(b *bolt.Bucket, key []byte) []byte {
	if b == nil {
		return nil
	}
	return b.Get(key)
}

func put(b *bolt.Bucket, key, value []byte) {
	err := b.Put(key, value)
	if err != nil {
		panic(err)
	}
}
